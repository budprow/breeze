rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // This rule applies to files inside a specific restaurant's 'documents' folder.
    match /documents/{restaurantId}/{allPaths=**} {

      // --- DEBUGGING STEP 2: Isolate the 'isAdmin' check ---
      // This is a temporary rule to test one specific piece of logic.
      // It ONLY checks if the user has the 'administrator' role in Firestore.
      function isAdministrator() {
        // This expression checks three things in order:
        // 1. Does the user's document exist in the 'users' collection?
        // 2. Does that document contain a 'role' key?
        // 3. Is the value of that 'role' key equal to 'administrator'?
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               'role' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'administrator';
      }

      // Allow access only if the user is authenticated AND the isAdministrator function returns true.
      // This will help us confirm if the get() call to Firestore is working as expected.
      allow read, write: if request.auth != null && isAdministrator();
    }
  }
}