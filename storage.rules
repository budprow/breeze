rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // This rule applies to files inside a specific restaurant's 'documents' folder.
    match /documents/{restaurantId}/{allPaths=**} {

      // --- FINAL SECURE AND CORRECT RULE (v3) ---

      // This function checks permissions by reading the user's profile from Firestore.
      // It is written as a single expression to be compatible with Cloud Storage rule syntax.
      function hasAccess() {
        // The expression first checks if the user's document exists in Firestore.
        // If it does, it then checks if the user is either an administrator OR
        // a member of the specific restaurant. This is safe because the 'get()'
        // calls will only be evaluated if the document exists.
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               (
                 // Condition 1: Is the user an administrator?
                 ('role' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'administrator')
                 ||
                 // Condition 2: Is the user a member of this restaurant?
                 ('restaurantId' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data &&
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.restaurantId == restaurantId)
               );
      }

      // Allow read and write access only if the user is authenticated AND
      // the hasAccess function returns true.
      allow read, write: if request.auth != null && hasAccess();
    }
  }
}