rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user can create their own profile, and can only read/update their own profile.
    match /users/{userId} {
      allow create;
      allow read, update: if request.auth.uid == userId;
    }

    // Restaurants can be read by any authenticated user.
    // Only the owner (the original administrator) can manage it.
    match /restaurants/{restaurantId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.ownerId;
    }

    // Rules for the 'documents' sub-collection.
    match /restaurants/{restaurantId}/documents/{docId} {

      // This function checks if the user is an administrator.
      // It safely checks for the existence of the user doc and the 'role' field.
      function isAdmin() {
        let userPath = /databases/$(database)/documents/users/$(request.auth.uid);
        return exists(userPath) &&
               'role' in get(userPath).data &&
               get(userPath).data.role == 'administrator';
      }

      // This function checks if the user is a member of the restaurant.
      // It safely checks for the existence of the user doc and the 'restaurantId' field.
      function isMember() {
        let userPath = /databases/$(database)/documents/users/$(request.auth.uid);
        return exists(userPath) &&
               'restaurantId' in get(userPath).data &&
               get(userPath).data.restaurantId == restaurantId;
      }

      // Allow reading and creating document records if the user is either
      // a member of the restaurant OR an administrator. This now matches the storage rule.
      allow read, create: if isMember() || isAdmin();

      // Allow deleting only if the user is an administrator.
      allow delete: if isAdmin();
    }

    // Invites can only be created by an administrator.
    match /invites/{inviteId} {
        // This function is defined here to avoid repetition.
        function isAdmin() {
          let userPath = /databases/$(database)/documents/users/$(request.auth.uid);
          return exists(userPath) &&
                 'role' in get(userPath).data &&
                 get(userPath).data.role == 'administrator';
        }

        allow read, create: if isAdmin();
        allow update: if request.auth != null; // Allows marking as used
    }
  }
}